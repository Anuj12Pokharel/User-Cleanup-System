"""
Django settings for user_backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import os
from pathlib import Path
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured
BASE_DIR = Path(__file__).resolve().parent.parent
DOTENV_PATH = BASE_DIR / ".env"
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

if not DOTENV_PATH.exists():
    # helpful debug message if path is wrong
    raise ImproperlyConfigured(f".env file not found at: {DOTENV_PATH}")

# load that specific .env file
load_dotenv(DOTENV_PATH)

def env_or_fail(key: str) -> str:
    v = os.getenv(key)
    if v is None or v == "":
        raise ImproperlyConfigured(f"Missing required environment variable: {key}")
    return v

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6j2pvi+7v_8y!i&ip^(p^&j2%4v_7ivcl-z72pphvk40png7j7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.18.4','localhost',]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'rest_framework',
    'users',
    'corsheaders',
]
APPEND_SLASH=False

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_backend.urls'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://192.168.18.7:3000",
  
  
]
# or for quick dev:
CORS_ALLOW_ALL_ORIGINS = True

# If you're using cookies / credentials:
CORS_ALLOW_CREDENTIALS = True
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_MINUTES', 15))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('JWT_REFRESH_DAYS', 7))),

}
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Celery Redis connection tuning
broker_connection_retry_on_startup = True
broker_transport_options = {
    "visibility_timeout": 3600,       # 1 hour
    "socket_connect_timeout": 10,     # seconds
    "socket_timeout": 30,             # seconds
}
result_backend_transport_options = {
    "socket_connect_timeout": 10,
    "socket_timeout": 30,
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'test_technical',
        'USER': 'test_anuj',
        'PASSWORD': 'Hello@2468',
        'HOST': 'db',   # use IP instead of 'localhost' to avoid psycopg getaddrinfo issues
        'PORT': 5432,
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL   = os.getenv('DEFAULT_FROM_EMAIL')
CLEANUP_NOTIFICATION_RECIPIENTS = [os.getenv('CLEANUP_NOTIFICATION_RECIPIENTS')] 

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kathmandu'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# Hard-coded settings (no env lookups)
INACTIVITY_DAYS = 30

# Redis / Celery (use Docker service name 'redis' so it works inside Compose)
REDIS_URL = "redis://redis:6379/0"
CELERY_BROKER_URL = "redis://redis:6379/0"
CELERY_RESULT_BACKEND = "redis://redis:6379/1"




# ------ Celery config ------
CELERY_BROKER_URL = CELERY_BROKER_URL
CELERY_RESULT_BACKEND = CELERY_RESULT_BACKEND
CELERY_CACHE_BACKEND = 'default'
CELERY_TIMEZONE = 'Asia/Kathmandu'
CELERY_ENABLE_UTC = True

# Use django-celery-beat scheduler if you installed it
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# -------- Channels / ASGI ----------
ASGI_APPLICATION = 'user_backend.asgi.application'

# Hard-coded cache settings (no env lookups)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # If your Redis requires a password, set it here:
            # "PASSWORD": "your_redis_password",
        },
    }
}


# -------- Logging (keep your previous logger) ----------
LOGGING = globals().get('LOGGING', {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {'console': {'class': 'logging.StreamHandler'}},
    'loggers': {},
})
LOGGING.setdefault('handlers', {}).setdefault('console', {'class': 'logging.StreamHandler'})
LOGGING.setdefault('loggers', {})['users.utils'] = {
    'handlers': ['console'],
    'level': 'INFO',
    'propagate': False,
}